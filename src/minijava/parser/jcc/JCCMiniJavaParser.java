/* Generated By:JavaCC: Do not edit this line. JCCMiniJavaParser.java */
package minijava.parser.jcc;

import java.util.ArrayList;
import minijava.ast.*;

@SuppressWarnings("all")
public class JCCMiniJavaParser implements JCCMiniJavaParserConstants {

// -----------------------------------------------------------------------------

// Builds an APT for an entire MiniJava source file
  final public Program Program() throws ParseException {
  MainClass             mainClass;
  ClassDecl             c;
  ArrayList<ClassDecl>  otherClasses = new ArrayList<ClassDecl>();
    mainClass = Main();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      c = ClassDeclaration();
                                   otherClasses.add(c);
    }
    jj_consume_token(0);
    {if (true) return new Program(mainClass, new NodeList<ClassDecl>(otherClasses));}
    throw new Error("Missing return statement in function");
  }

// -----------------------------------------------------------------------------

// Builds an APT for the MiniJava main class
  final public MainClass Main() throws ParseException {
  Token     className,
            argName;
  Statement s;
    jj_consume_token(CLASS);
    className = jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACE);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAR);
    jj_consume_token(STRING);
    jj_consume_token(LBRACK);
    jj_consume_token(RBRACK);
    argName = jj_consume_token(IDENTIFIER);
    jj_consume_token(RPAR);
    jj_consume_token(LBRACE);
    s = Statement();
    jj_consume_token(RBRACE);
    jj_consume_token(RBRACE);
    {if (true) return new MainClass(className.image, argName.image, s);}
    throw new Error("Missing return statement in function");
  }

// -----------------------------------------------------------------------------

// Builds an APT for a MiniJava class
  final public ClassDecl ClassDeclaration() throws ParseException {
  Token                 name,
                        superName = null;
  VarDecl               v;
  MethodDecl            m;
  ArrayList<VarDecl>    vars      = new ArrayList<VarDecl>();
  ArrayList<MethodDecl> methods   = new ArrayList<MethodDecl>();
    jj_consume_token(CLASS);
    name = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      superName = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case TYPE_INT:
      case TYPE_BOOLEAN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE_INT:
      case TYPE_BOOLEAN:
      case IDENTIFIER:
        v = VarDeclaration(VarDecl.Kind.FIELD);
                                                vars.add(v);
        break;
      case PUBLIC:
        m = MethodDeclaration();
                              methods.add(m);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RBRACE);
    {if (true) return new ClassDecl( name.image,
                          (superName != null) ? superName.image : null,
                          new NodeList<VarDecl>(vars),
                          new NodeList<MethodDecl>(methods));}
    throw new Error("Missing return statement in function");
  }

// -----------------------------------------------------------------------------

// Builds an APT for a MiniJava variable declaration
  final public VarDecl VarDeclaration(VarDecl.Kind kind) throws ParseException {
  Type  type;
  Token id;
    type = Type();
    id = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
    {if (true) return new VarDecl(kind, type, id.image);}
    throw new Error("Missing return statement in function");
  }

// -----------------------------------------------------------------------------

// Builds an APT for a MiniJava method declaration
  final public MethodDecl MethodDeclaration() throws ParseException {
  Type                  returnType;
  Token                 id;
  VarDecl               varDecl;
  Statement             s;
  ArrayList<VarDecl>    formals     = new ArrayList<VarDecl>();
  ArrayList<VarDecl>    vars        = new ArrayList<VarDecl>();
  ArrayList<Statement>  statements  = new ArrayList<Statement>();
  Expression            returnExp;
    jj_consume_token(PUBLIC);
    returnType = Type();
    id = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAR);
    formals = FormalList();
    jj_consume_token(RPAR);
    jj_consume_token(LBRACE);
    label_3:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_3;
      }
      varDecl = VarDeclaration(VarDecl.Kind.LOCAL);
                  vars.add(varDecl);
    }
    label_4:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_4;
      }
      s = Statement();
                  statements.add(s);
    }
    jj_consume_token(RETURN);
    returnExp = Expression();
    jj_consume_token(SEMICOLON);
    jj_consume_token(RBRACE);
    {if (true) return new MethodDecl(returnType,
                          id.image,
                          formals,
                          vars,
                          statements,
                          returnExp);}
    throw new Error("Missing return statement in function");
  }

// -----------------------------------------------------------------------------

// Builds an APT for an argument list in a MiniJava method
  final public ArrayList<VarDecl> FormalList() throws ParseException {
  Type                t;
  Token               id;
  ArrayList<VarDecl>  formals = new ArrayList<VarDecl>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE_INT:
    case TYPE_BOOLEAN:
    case IDENTIFIER:
      // First formal
          t = Type();
      id = jj_consume_token(IDENTIFIER);
              formals.add(new VarDecl(VarDecl.Kind.FORMAL, t, id.image));
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        t = Type();
        id = jj_consume_token(IDENTIFIER);
              formals.add(new VarDecl(VarDecl.Kind.FORMAL, t, id.image));
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    {if (true) return formals;}
    throw new Error("Missing return statement in function");
  }

// -----------------------------------------------------------------------------

// Builds an APT for a MiniJava statement
  final public Statement Statement() throws ParseException {
  Token                 name;
  Expression            e1,
                        e2;
  Statement             s1,
                        s2;
  ArrayList<Statement>  statements = new ArrayList<Statement>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case LBRACE:
        case PRINTLN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
        s1 = Statement();
                        statements.add(s1);
      }
      jj_consume_token(RBRACE);
    {if (true) return new Block(new NodeList<Statement>(statements));}
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(LPAR);
      e1 = Expression();
      jj_consume_token(RPAR);
      s1 = Statement();
      jj_consume_token(ELSE);
      s2 = Statement();
    {if (true) return new If(e1, s1, s2);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(LPAR);
      e1 = Expression();
      jj_consume_token(RPAR);
      s1 = Statement();
    {if (true) return new While(e1, s1);}
      break;
    case PRINTLN:
      jj_consume_token(PRINTLN);
      jj_consume_token(LPAR);
      e1 = Expression();
      jj_consume_token(RPAR);
      jj_consume_token(SEMICOLON);
    {if (true) return new Print(e1);}
      break;
    default:
      jj_la1[7] = jj_gen;
      if (jj_2_3(2)) {
        name = jj_consume_token(IDENTIFIER);
        jj_consume_token(EQUAL);
        e1 = Expression();
        jj_consume_token(SEMICOLON);
    {if (true) return new Assign(name.image, e1);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          // Array assignment statement
            name = jj_consume_token(IDENTIFIER);
          jj_consume_token(LBRACK);
          e1 = Expression();
          jj_consume_token(RBRACK);
          jj_consume_token(EQUAL);
          e2 = Expression();
          jj_consume_token(SEMICOLON);
    {if (true) return new ArrayAssign(name.image, e1, e2);}
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

// -----------------------------------------------------------------------------

// Builds an APT for a MiniJava expression
// Operator precedence (low to high): &&, <, +/-, *, !, []/.
// And Expressions
  final public Expression Expression() throws ParseException {
  Expression e1,
             e2;
    e1 = LessThanExpr();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_7;
      }
      jj_consume_token(AND);
      e2 = LessThanExpr();
      e1 = new And(e1, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// -----------------------------------------------------------------------------

// LessThan expressions
// Helper method for Expression()
  final public Expression LessThanExpr() throws ParseException {
  Expression e1,
             e2;
    e1 = AddMinusExpr();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS_THAN:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_8;
      }
      jj_consume_token(LESS_THAN);
      e2 = AddMinusExpr();
      e1 = new LessThan(e1, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// -----------------------------------------------------------------------------

// Add/Minus expressions
// Helper method for Expression()
  final public Expression AddMinusExpr() throws ParseException {
  Expression e1,
             e2;
    e1 = MultExpr();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        e2 = MultExpr();
      e1 = new Plus(e1, e2);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        e2 = MultExpr();
      e1 = new Minus(e1, e2);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// -----------------------------------------------------------------------------

// Times expressions
// Helper method for Expression()
  final public Expression MultExpr() throws ParseException {
  Expression e1,
             e2;
    e1 = NotExpr();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_10;
      }
      jj_consume_token(MULTIPLY);
      e2 = NotExpr();
      e1 = new Times(e1, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// -----------------------------------------------------------------------------

// Not expressions
// Helper method for Expression()
  final public Expression NotExpr() throws ParseException {
  Expression e;
  int numNots = 0;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_11;
      }
      jj_consume_token(NOT);
      numNots++;
    }
    e = AccessorExpr();
    // Wrap the expression with the counted number of nots
    for(int i = 0; i < numNots; i++)
    {
      e = new Not(e);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

// -----------------------------------------------------------------------------

// Accessor expressions
// Helper method for Expression()
  final public Expression AccessorExpr() throws ParseException {
  Expression  e1,
              e2;
    e1 = BasicExpr();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case LBRACK:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_12;
      }
      e1 = AccessorExprTail(e1);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// -----------------------------------------------------------------------------

// Builds an APT for a basic expression
// Helper method for Expression()
  final public Expression BasicExpr() throws ParseException {
  Token       id;
  Expression  e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
      // Integer literal
        id = jj_consume_token(CONSTANT);
                         {if (true) return new IntegerLiteral(id.image);}
      break;
    case TRUE:
      jj_consume_token(TRUE);
                         {if (true) return new BooleanLiteral(true);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                         {if (true) return new BooleanLiteral(false);}
      break;
    case IDENTIFIER:
      // Identifier
        id = jj_consume_token(IDENTIFIER);
                         {if (true) return new IdentifierExp(id.image);}
      break;
    case THIS:
      jj_consume_token(THIS);
                         {if (true) return new This();}
      break;
    default:
      jj_la1[16] = jj_gen;
      if (jj_2_4(2)) {
        jj_consume_token(NEW);
        jj_consume_token(TYPE_INT);
        jj_consume_token(LBRACK);
        e = Expression();
        jj_consume_token(RBRACK);
    {if (true) return new NewArray(e);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          jj_consume_token(NEW);
          id = jj_consume_token(IDENTIFIER);
          jj_consume_token(LPAR);
          jj_consume_token(RPAR);
    {if (true) return new NewObject(id.image);}
          break;
        case LPAR:
          jj_consume_token(LPAR);
          e = Expression();
          jj_consume_token(RPAR);
    {if (true) return e;}
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

// -----------------------------------------------------------------------------

// Array access ([]), field/method access (.)
// Helper method for Expression()
  final public Expression AccessorExprTail(Expression e) throws ParseException {
  Token                 id;
  Expression            e1,
                        e2;
  ArrayList<Expression> rands = new ArrayList<Expression>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      jj_consume_token(LBRACK);
      e1 = Expression();
      jj_consume_token(RBRACK);
    {if (true) return new ArrayLookup(e, e1);}
      break;
    default:
      jj_la1[21] = jj_gen;
      if (jj_2_5(2)) {
        jj_consume_token(DOT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LENGTH:
          jj_consume_token(LENGTH);
      {if (true) return new ArrayLength(e);}
          break;
        case IDENTIFIER:
          id = jj_consume_token(IDENTIFIER);
          jj_consume_token(LPAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TRUE:
          case FALSE:
          case THIS:
          case NEW:
          case NOT:
          case LPAR:
          case CONSTANT:
          case IDENTIFIER:
            e1 = Expression();
              rands.add(e1);
            label_13:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[18] = jj_gen;
                break label_13;
              }
              jj_consume_token(COMMA);
              e2 = Expression();
                rands.add(e2);
            }
            break;
          default:
            jj_la1[19] = jj_gen;
            ;
          }
          jj_consume_token(RPAR);
      {if (true) return new Call(e, id.image, new NodeList<Expression>(rands));}
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

// -----------------------------------------------------------------------------

// Builds an APT for a MiniJava type
  final public Type Type() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE_INT:
      // Integer
        t = jj_consume_token(TYPE_INT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        jj_consume_token(LBRACK);
        jj_consume_token(RBRACK);
          {if (true) return new IntArrayType();}
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
        {if (true) return new IntegerType();}
      break;
    case TYPE_BOOLEAN:
      // Boolean
        t = jj_consume_token(TYPE_BOOLEAN);
                          {if (true) return new BooleanType();}
      break;
    case IDENTIFIER:
      // Object
        t = jj_consume_token(IDENTIFIER);
                          {if (true) return new ObjectType(t.image);}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(LBRACK)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(PRINTLN)) return true;
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(TYPE_INT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(TYPE_INT)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACK)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(TYPE_BOOLEAN)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JCCMiniJavaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x8000,0x400,0x400,0x0,0x0,0xa0000,0xa0000,0x0,0x40000000,0x80000000,0x6000000,0x6000000,0x8000000,0x0,0x0,0x700000,0x800000,0x0,0xf00000,0x1000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x5800,0x5800,0x100,0x5800,0x4440,0x440,0x4000,0x0,0x0,0x0,0x0,0x0,0x2,0x11,0x6000,0x4,0x100,0x6006,0x4000,0x10,0x10,0x5800,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JCCMiniJavaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JCCMiniJavaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JCCMiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JCCMiniJavaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JCCMiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JCCMiniJavaParser(JCCMiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JCCMiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[49];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                                }
